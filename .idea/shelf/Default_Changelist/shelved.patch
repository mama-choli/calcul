Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1624350534504)
+++ b/.idea/misc.xml	(date 1624350534504)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="EntryPointsManager">
+    <entry_points version="2.0" />
+  </component>
+  <component name="ProjectKey">
+    <option name="state" value="project://e2804f05-5315-4fc6-a121-c522a6c26470" />
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_16" default="true" project-jdk-name="openjdk-16" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: calcul.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/calcul.iml b/calcul.iml
new file mode 100644
--- /dev/null	(date 1624350534487)
+++ b/calcul.iml	(date 1624350534487)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: src/com/company/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/company/Main.java b/src/com/company/Main.java
new file mode 100644
--- /dev/null	(date 1624353174743)
+++ b/src/com/company/Main.java	(date 1624353174743)
@@ -0,0 +1,217 @@
+package com.company;
+
+import java.util.Arrays;
+import java.util.Scanner;
+
+public class Main {
+    public static String[] strings = new String[]{"I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X"};
+    public static String[] ints = new String[]{"1", "2", "3", "4", "5", "6", "7", "8", "9", "10"};
+
+
+
+    public static String convert(int in) {
+        StringBuffer a = new StringBuffer("");
+        if (in == 100) {
+            return "C";
+        } else {
+            int l1;
+            int l2;
+            int x1;
+            if (in >= 50) {
+                l1 = in / 10;
+                a.append(L(l1));
+                l2 = in % 50;
+                x1 = l2 / 10;
+                a.append(X(x1));
+                int x2 = l2 % 10;
+                a.append(basic(x2));
+            } else {
+                l1 = in % 50;
+                l2 = l1 / 10;
+                a.append(XL(l2));
+                x1 = l1 % 10;
+                a.append(basic(x1));
+            }
+
+            return a.toString();
+        }
+    }
+
+    private static String X(int in) {
+        if (in != 0 && in < 4) {
+            StringBuffer a = new StringBuffer("");
+
+            for(int i = 0; i < in; ++i) {
+                a.append("X");
+            }
+
+            return a.toString();
+        } else {
+            return "";
+        }
+    }
+
+    private static String XL(int in) {
+        if (in == 4) {
+            return "XL";
+        } else if (in != 0 && in < 4) {
+            StringBuffer a = new StringBuffer("");
+
+            for(int i = 0; i < in; ++i) {
+                a.append("X");
+            }
+
+            return a.toString();
+        } else {
+            return "";
+        }
+    }
+
+    private static String L(int in) {
+        if (in == 9) {
+            return "XC";
+        } else if (in != 0 && in < 9) {
+            StringBuffer a = new StringBuffer("");
+            a.append("L");
+            return a.toString();
+        } else {
+            return "";
+        }
+    }
+
+    private static String basic(int in) {
+        String[] a = new String[]{"", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"};
+        return a[in];
+    }
+
+    public static boolean useList(String[] arr, String targetValue) {
+        return Arrays.asList(arr).contains(targetValue);
+    }
+
+    public static void off() {
+        System.out.println("OFF");
+    }
+
+
+    public static void main(String[] args) {
+        Scanner r = new Scanner(System.in);
+        String v = r.nextLine();
+        String[] y = v.split(" ");
+        if (y.length == 3) {
+            String p = y[0];
+            String z = y[1];
+            String h = y[2];
+            String[] l = strings;
+            String[] q = ints;
+            if (useList(l, p) && useList(l, h)) {
+                Roman gg = Roman.valueOf(y[0]);
+                Roman g = Roman.valueOf(y[2]);
+                int ii = gg.getValue();
+                int oo = g.getValue();
+                byte var15 = -1;
+                switch (z.hashCode()) {
+                    case 42:
+                        if (z.equals("*")) {
+                            var15 = 2;
+                        }
+                        break;
+                    case 43:
+                        if (z.equals("+")) {
+                            var15 = 0;
+                        }
+                    case 44:
+                    case 46:
+                    default:
+                        break;
+                    case 45:
+                        if (z.equals("-")) {
+                            var15 = 1;
+                        }
+                        break;
+                    case 47:
+                        if (z.equals("/")) {
+                            var15 = 3;
+                        }
+                }
+
+                int sum;
+                switch (var15) {
+                    case 0:
+                        sum = ii + oo;
+                        System.out.println(convert(sum));
+                        break;
+                    case 1:
+                        sum = ii - oo;
+                        if (sum > 0) {
+                            System.out.print(convert(sum));
+                        } else {
+                            off();
+                        }
+                        break;
+                    case 2:
+                        sum = ii * oo;
+                        System.out.print(convert(sum));
+                        break;
+                    case 3:
+                        sum = ii / oo;
+                        System.out.print(convert(sum));
+                        break;
+                    default:
+                        off();
+                }
+            } else if (useList(q, p) && useList(q, h)) {
+                int i = Integer.parseInt(y[0]);
+                int o = Integer.parseInt(y[2]);
+                byte var12 = -1;
+                switch (z.hashCode()) {
+                    case 42:
+                        if (z.equals("*")) {
+                            var12 = 2;
+                        }
+                        break;
+                    case 43:
+                        if (z.equals("+")) {
+                            var12 = 0;
+                        }
+                    case 44:
+                    case 46:
+                    default:
+                        break;
+                    case 45:
+                        if (z.equals("-")) {
+                            var12 = 1;
+                        }
+                        break;
+                    case 47:
+                        if (z.equals("/")) {
+                            var12 = 3;
+                        }
+                }
+
+                switch (var12) {
+                    case 0:
+                        System.out.print(i + o);
+                        break;
+                    case 1:
+                        System.out.print(i - o);
+                        break;
+                    case 2:
+                        System.out.print(i * o);
+                        break;
+                    case 3:
+                        System.out.print(i / o);
+                        break;
+                    default:
+                        off();
+                }
+            } else {
+                off();
+            }
+        } else {
+            off();
+        }
+
+    }
+
+    }
+
Index: .idea/description.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/description.html b/.idea/description.html
new file mode 100644
--- /dev/null	(date 1624350532307)
+++ b/.idea/description.html	(date 1624350532307)
@@ -0,0 +1,1 @@
+<html>Simple <b>Java</b> application that includes a class with <code>main()</code> method</html>
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1624351129123)
+++ b/.gitignore	(date 1624351129123)
@@ -0,0 +1,2 @@
+# Project exclude paths
+/out/
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1624351649763)
+++ b/.idea/vcs.xml	(date 1624351649763)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1624350534494)
+++ b/.idea/modules.xml	(date 1624350534494)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/calcul.iml" filepath="$PROJECT_DIR$/calcul.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/project-template.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/project-template.xml b/.idea/project-template.xml
new file mode 100644
--- /dev/null	(date 1624350532314)
+++ b/.idea/project-template.xml	(date 1624350532314)
@@ -0,0 +1,3 @@
+<template>
+  <input-field default="com.company">IJ_BASE_PACKAGE</input-field>
+</template>
\ No newline at end of file
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1624350534514)
+++ b/.idea/encodings.xml	(date 1624350534514)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="PROJECT" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1624350539272)
+++ b/.idea/.gitignore	(date 1624350539272)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: src/com/company/Roman.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/company/Roman.java b/src/com/company/Roman.java
new file mode 100644
--- /dev/null	(date 1624350933349)
+++ b/src/com/company/Roman.java	(date 1624350933349)
@@ -0,0 +1,24 @@
+package com.company;
+
+public enum Roman {
+    I(1),
+    II(2),
+    III(3),
+    IV(4),
+    V(5),
+    VI(6),
+    VII(7),
+    VIII(8),
+    IX(9),
+    X(10);
+
+    private int value;
+
+    private Roman(int value) {
+        this.value = value;
+    }
+
+    public int getValue() {
+        return this.value;
+    }
+}
